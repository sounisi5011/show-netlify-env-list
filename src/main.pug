-
  /**
   * Dateオブジェクトを見やすい表示に変換する
   * @param {!Date} date 変換元のDateオブジェクト
   * @param {string} format 変換形式を指定する文字列。UNIXのdateコマンド互換
   * @param {number} timezoneSec タイムゾーンの秒数。
   *     例えば、+09:00のタイムゾーンを指定したい場合は、
   *     32400（`9 * 60 * 60`の計算結果）を指定する
   */
  const formatDate = (date, format='%Y-%m-%dT%H:%M:%S%:z', timezoneSec=NaN) => {
    /*
     * 引数の型チェックを行う
     */
    if (!(date && date instanceof Date)) {
      throw new TypeError(
        'formatDate(date, format, timezoneSec):\n' +
        `  date parameter must be Date object.\n` +
        `  buy it's value: ${JSON.stringify(date)}.`
      );
    }
    if (typeof format !== 'string') {
      throw new TypeError(
        'formatDate(date, format, timezoneSec):\n' +
        `  format parameter must be string.\n` +
        `  buy it's value: ${JSON.stringify(format)}.`
      );
    }

    /*
     * timezoneSecパラメータの値を数値へ型変換する。
     * 同時に、小数部を切り捨てる。
     */
    timezoneSec = Math.trunc(timezoneSec);

    /*
     * Dateオブジェクトから、タイムゾーンの秒数を取得する
     */
    const systemTimezoneSec = date.getTimezoneOffset() * -1 * 60;

    if (isFinite(timezoneSec)) {
      /*
       * timezoneSecの値が範囲内かを判定
       */
      if (!(-(24 * 3600) < timezoneSec)) {
        throw new TypeError(
          'formatDate(date, format, timezoneSec):\n' +
          `  timezoneSec parameter must be greater than ${-(24 * 3600)} ` +
          `( ${-(24 * 3600)} < timezoneSec ).\n` +
          `  buy it's value: ${timezoneSec}.`
        );
      } else if (!(timezoneSec < (24 * 3600))) {
        throw new TypeError(
          'formatDate(date, format, timezoneSec):\n' +
          `  timezoneSec parameter must be less than ${24 * 3600} ` +
          `( timezoneSec < ${24 * 3600} ).\n` +
          `  buy it's value: ${timezoneSec}.`
        );
      }

      /*
       * タイムゾーンに合わせて、Dateオブジェクトの時間をずらす
       */
      const unixtime = date.getTime();
      date = new Date(unixtime - (systemTimezoneSec - timezoneSec) * 1000);
    } else {
      /*
       * タイムゾーンの指定が無い場合、Dateオブジェクトのタイムゾーンから求める
       */
      timezoneSec = systemTimezoneSec;
    }

    /*
     * タイムゾーンの文字列に使用する値を求める
     */
    const timezoneSign = timezoneSec < 0 ? '-' : '+';
    const timezoneAbs = Math.abs(timezoneSec);
    const timezoneH = String(Math.floor(timezoneAbs / 3600))
      .padStart(2, '0');
    const timezoneM = String(Math.floor(timezoneAbs % 3600 / 60))
      .padStart(2, '0');
    const timezoneS = String(timezoneAbs % 60)
      .padStart(2, '0');

    /*
     * ナノ秒の数値文字列を生成する
     */
    const ns = (
      String(date.getMilliseconds()).padStart(3, '0') +
      '0'.repeat(6)
    );

    /*
     * 置換元と置換先の組み合わせを定義する
     */
    const replaceDict = {
      '%%': '%',
      '%Y': String(date.getFullYear()),
      '%-m': String(date.getMonth() + 1),
      '%m': String(date.getMonth() + 1).padStart(2, '0'),
      '%-d': String(date.getDate()),
      '%d': String(date.getDate()).padStart(2, '0'),
      '%-H': String(date.getHours()),
      '%H': String(date.getHours()).padStart(2, '0'),
      '%-M': String(date.getMinutes()),
      '%M': String(date.getMinutes()).padStart(2, '0'),
      '%-S': String(date.getSeconds()),
      '%S': String(date.getSeconds()).padStart(2, '0'),
      '%s': String(date.getTime()),
      '%N': ns,
      '%1N': ns.substr(0, 1),
      '%2N': ns.substr(0, 2),
      '%3N': ns.substr(0, 3),
      '%4N': ns.substr(0, 4),
      '%5N': ns.substr(0, 5),
      '%6N': ns.substr(0, 6),
      '%7N': ns.substr(0, 7),
      '%8N': ns.substr(0, 8),
      '%9N': ns.substr(0, 9),
      '%z': `${timezoneSign}${timezoneH}${timezoneM}`,
      '%:z': `${timezoneSign}${timezoneH}:${timezoneM}`,
      '%::z': `${timezoneSign}${timezoneH}:${timezoneM}:${timezoneS}`,
    };

    /*
     * 置換する
     * Note: この実装では、例えば"constructor"のような値を
     *       置換しようとした時に正しく動作しない。
     *       これは、オブジェクトのプロトタイプにconstructorメソッドが存在するためで、
     *       適切な動作を求めるならhasOwnPropertyメソッドで
     *       プロパティの存在判定をする必要がある。
     *       が、今回の場合はいずれも"%〜"のような値だけを置換するため、
     *       冗長な判定は使用していない。
     */
    return format.replace(
      /%(?:y|-?[mdhms%]|[1-9]n|:{0,2}z)/ig,
      match => (replaceDict[match] || match)
    );
  };

-
  // https://www.netlify.com/docs/continuous-deployment/#build-environment-variables
  const ciEnvKeys = [
    'REPOSITORY_URL',
    'BRANCH',
    'PULL_REQUEST',
    'HEAD',
    'COMMIT_REF',
    'CONTEXT',
    'REVIEW_ID',
    'WEBHOOK_TITLE',
    'WEBHOOK_URL',
    'WEBHOOK_BODY',
    'URL',
    'DEPLOY_URL',
    'DEPLOY_PRIME_URL',
  ];

-
  const generateTime = new Date;
  const titleText = (
    'Show process.env value list' +
    (
      process.env.npm_package_version ?
      ' ' + process.env.npm_package_version :
      ''
    )
  );

//- ----- ----- ----- -///

doctype html
html
  head
    meta(charset="utf-8")
    meta(name="viewport" content="width=device-width,initial-scale=1")
    meta(name="format-detection" content="telephone=no,email=no,address=no")
    meta(name="robots" content="noindex, nofollow, noarchive")
    meta(
      name="creation_date"
      content=formatDate(generateTime, '%Y-%m-%dT%H:%M:%SZ', 0)
    )
    title= titleText
    style.
      body {
        max-width: 60em;
        margin-left: auto;
        margin-right: auto;
      }
      h1, h2 {
        text-align: center;
      }
      table {
        border-collapse: collapse;
        width: 100%;
      }
      th, td {
        border: solid 1px;
      }
      th {
        width: 10px;
        white-space: nowrap;
        text-align: left;
      }
      textarea {
        display: block;
        box-sizing: border-box;
        width: 60em;
        margin-left: auto;
        margin-right: auto;
        max-width: 100%;
      }
      td textarea {
        width: 100%;
      }
      footer {
        text-align: right;
      }
  body
    h1= titleText

    h2
      a(href="https://www.netlify.com/docs/continuous-deployment/#build-environment-variables")
        | Build Environment variables

    textarea(readonly rows="10")
      -
        const list = ciEnvKeys
          .filter(key => key in process.env);
        const keyMaxLen = list
          .reduce((l, s) => Math.max(l, s.length), 0);

      each key in list
        if key in process.env
          - const keyStr = (key + ':').padEnd(keyMaxLen + 2);
          - const value = process.env[key];
          | #{keyStr}#{value}
          |

    h2 value table
    table
      -
        const keyList = Object.keys(process.env)
          .sort((A, B) => {
            const [a, b] = [A.toLowerCase(), B.toLowerCase()];
            return (
              a < b ? -1 :
              a > b ? +1 :
              0
            );
          });

      each key in keyList
        - const value = process.env[key];
        tr
          th= key
          td
            if value !== ''
              textarea(readonly)= value
            else
              | Zero length string

    h2 value json
    textarea(readonly rows="10")= JSON.stringify(process.env)

    footer
      p
        | Last updated at#{' '}
        time(title=formatDate(generateTime, '%Y年%-m月%-d日 %H:%M:%S JST', 9 * 60 * 60))
          | #{formatDate(generateTime, '%Y-%m-%dT%H:%M:%SZ', 0)}
